summarize(ttl_users = n(), lat = mean(raw_lat), long = mean(raw_long))%>%
arrange(-ttl_users)
city_clean_final_aggregate$city <- str_extract(city_clean_final_aggregate$c_city_code,"_(.*)_")
city_clean_final_aggregate$city <- gsub("_", "", city_clean_final_aggregate$city, fixed = TRUE)
city_clean_final_aggregate$city<- sapply(city_clean_final_aggregate$city,CapStr)
city_clean_final_aggregate$city_country <- paste(city_clean_final_aggregate$city, city_clean_final_aggregate$c_country_name, sep = ", ")
top_city_vector <- as.vector(city_clean_final_aggregate[1:10,]$c_city_code)
city_clean_final_aggregate <- city_clean_final_aggregate%>%
mutate(top_city = if_else(c_city_code %in% top_city_vector, "topcity", "not topcity"))
gh_continent<- city_clean_final_aggregate_continent%>%
arrange(desc(ttl_users))
gh_continent$Continent_Name <- factor(gh_continent$c_continent_name, levels = gh_continent$c_continent_name[order(gh_continent$ttl_users)])
ggplot(gh_continent, aes(x = Continent_Name, y = ttl_users, fill = ttl_users))+
geom_bar(stat = "identity")+
scale_fill_continuous(low = uva_color_palette[5], high=uva_color_palette[8])+
labs(title = "Continents where Github users are located", x = "continent", y = "total number of users", fill = "total number \n of users")+
theme_bw()
gh_country <- city_clean_final_aggregate_country%>%
arrange(desc(ttl_users))%>%
top_n(10, ttl_users)
gh_country$c_country_name <- factor(gh_country$c_country_name, levels = gh_country$c_country_name[order(gh_country$ttl_users)])
ggplot(gh_country, aes(x = c_country_name, y = ttl_users, fill = ttl_users)) +
geom_bar(stat = "identity")+
scale_fill_continuous(low = uva_color_palette[5], high=uva_color_palette[8])+
labs(title = "Countries where Github users are located", x = "country", y = "total number of users", fill = "total number \n of users") +
theme_bw()
gh_city <- city_clean_final_aggregate%>%
arrange(-ttl_users)%>%
# top_n(10, ttl_users)%>%  #don't know why this code doesn't work
filter(ttl_users >= 6651)
gh_city$city_country <- str_replace_all(gh_city$city_country, fixed(","), "\n")
gh_city$city_country <- factor(gh_city$city_country, levels = gh_city$city_country[order(gh_city$ttl_users)])
# NOTE ::: Could you please shorten the labels for the USA and Russia cities
ggplot(gh_city, aes(x = city_country, y = ttl_users, fill = ttl_users))+
geom_bar(stat = "identity")+
scale_fill_continuous(low = uva_color_palette[5], high=uva_color_palette[8])+
labs(title = "Countries where Github users are located", x = "city", y = "total number of users", fill = "total number \n of users") +
theme_bw()
#In this map, the color of the circle indicates the number of github users in each city, still under development.
city_clean_final_aggregate_top <- city_clean_final_aggregate%>%
filter(ttl_users > 10)%>%
mutate(ttl_users_t = log(ttl_users), perc = ttl_users_t/max(ttl_users_t))
pal <- colorFactor(
palette = c(uva_color_palette[4], uva_color_palette[8]),
levels = c( "not topcity", "topcity")
)
#ttl user indicated by size
city_clean_final_aggregate%>%
#  mutate(ttl_users_exp = exp(ttl_users)^(1/3))%>%
leaflet()%>%
addTiles()%>%
addSearchOSM()%>%
addReverseSearchOSM()%>%
clearMarkers()%>%
addResetMapButton()%>%
addCircleMarkers(
lng = ~long ,
lat = ~lat,
label = ~ paste(city_country,", ", ttl_users, " user(s)", sep = ""),
radius = ~ttl_users^(1/3),
color  = ~pal(top_city))%>%
addLegend(pal = pal, values = c( "not topcity", "topcity"))
blogdown::serve_site()
#In this map, the color of the circle indicates the number of github users in each city, still under development.
city_clean_final_aggregate_top <- city_clean_final_aggregate%>%
filter(ttl_users > 10)%>%
mutate(ttl_users_t = log(ttl_users), perc = ttl_users_t/max(ttl_users_t))
pal <- colorFactor(
palette = c(uva_color_palette[9], uva_color_palette[3], uva_color_palette[2]),
levels = c( "not topcity", "topcity")
)
#ttl user indicated by size
city_clean_final_aggregate%>%
#  mutate(ttl_users_exp = exp(ttl_users)^(1/3))%>%
leaflet()%>%
addTiles()%>%
addSearchOSM()%>%
addReverseSearchOSM()%>%
clearMarkers()%>%
addResetMapButton()%>%
addCircleMarkers(
lng = ~long ,
lat = ~lat,
label = ~ paste(city_country,", ", ttl_users, " user(s)", sep = ""),
radius = ~ttl_users^(1/3),
color  = ~pal(top_city))%>%
addLegend(pal = pal, values = c( "not topcity", "topcity"))
gh_city <- city_clean_final_aggregate%>%
arrange(-ttl_users)%>%
# top_n(10, ttl_users)%>%  #don't know why this code doesn't work
filter(ttl_users >= 6651)
gh_city$city_country <- str_replace_all(gh_city$city_country, fixed(","), "\n")
gh_city$city_country <- factor(gh_city$city_country, levels = gh_city$city_country[order(gh_city$ttl_users)])
# NOTE ::: Could you please shorten the labels for the USA and Russia cities
ggplot(gh_city, aes(x = city_country, y = ttl_users, fill = ttl_users))+
geom_bar(stat = "identity")+
scale_fill_continuous(low = uva_color_palette[9], high=uva_color_palette[2])+
labs(title = "Countries where Github users are located", x = "city", y = "total number of users", fill = "total number \n of users") +
theme_bw()
gh_city <- city_clean_final_aggregate%>%
arrange(-ttl_users)%>%
# top_n(10, ttl_users)%>%  #don't know why this code doesn't work
filter(ttl_users >= 6651)
gh_city$city_country <- str_replace_all(gh_city$city_country, fixed(","), "\n")
gh_city$city_country <- factor(gh_city$city_country, levels = gh_city$city_country[order(gh_city$ttl_users)])
# NOTE ::: Could you please shorten the labels for the USA and Russia cities
ggplot(gh_city, aes(x = city_country, y = ttl_users, fill = ttl_users))+
geom_bar(stat = "identity")+
scale_fill_continuous(low = uva_color_palette[9], medium=uva_color_palette[4], high=uva_color_palette[2])+
labs(title = "Countries where Github users are located", x = "city", y = "total number of users", fill = "total number \n of users") +
theme_bw()
?scale_fill_continuous
gh_country <- city_clean_final_aggregate_country%>%
arrange(desc(ttl_users))%>%
top_n(10, ttl_users)
gh_country$c_country_name <- factor(gh_country$c_country_name, levels = gh_country$c_country_name[order(gh_country$ttl_users)])
ggplot(gh_country, aes(x = c_country_name, y = ttl_users, fill = ttl_users)) +
geom_bar(stat = "identity")+
scale_fill_continuous(low = uva_color_palette[9], high=uva_color_palette[2])+
labs(title = "Countries where Github users are located", x = "country", y = "total number of users", fill = "total number \n of users") +
theme_bw()
gh_continent<- city_clean_final_aggregate_continent%>%
arrange(desc(ttl_users))
gh_continent$Continent_Name <- factor(gh_continent$c_continent_name, levels = gh_continent$c_continent_name[order(gh_continent$ttl_users)])
ggplot(gh_continent, aes(x = Continent_Name, y = ttl_users, fill = ttl_users))+
geom_bar(stat = "identity")+
scale_fill_continuous(low = uva_color_palette[9], high=uva_color_palette[2])+
labs(title = "Continents where Github users are located", x = "continent", y = "total number of users", fill = "total number \n of users")+
theme_bw()
#In this map, the color of the circle indicates the number of github users in each city, still under development.
city_clean_final_aggregate_top <- city_clean_final_aggregate%>%
filter(ttl_users > 10)%>%
mutate(ttl_users_t = log(ttl_users), perc = ttl_users_t/max(ttl_users_t))
pal <- colorFactor(
palette = c(uva_color_palette[2], uva_color_palette[9]),
levels = c( "Not Top City", "Top-10 City")
)
#ttl user indicated by size
city_clean_final_aggregate%>%
#  mutate(ttl_users_exp = exp(ttl_users)^(1/3))%>%
leaflet()%>%
addTiles()%>%
addSearchOSM()%>%
addReverseSearchOSM()%>%
clearMarkers()%>%
addResetMapButton()%>%
addCircleMarkers(
lng = ~long ,
lat = ~lat,
label = ~ paste(city_country,", ", ttl_users, " user(s)", sep = ""),
radius = ~ttl_users^(1/3),
color  = ~pal(top_city))%>%
addLegend(pal = pal, values = c( "Not Top City", "Top-10 City"))
#In this map, the color of the circle indicates the number of github users in each city, still under development.
city_clean_final_aggregate_top <- city_clean_final_aggregate%>%
filter(ttl_users > 10)%>%
mutate(ttl_users_t = log(ttl_users), perc = ttl_users_t/max(ttl_users_t))
pal <- colorFactor(
palette = c(uva_color_palette[2], uva_color_palette[9]),
levels = c( "not topcity", "topcity")
)
#ttl user indicated by size
city_clean_final_aggregate%>%
#  mutate(ttl_users_exp = exp(ttl_users)^(1/3))%>%
leaflet()%>%
addTiles()%>%
addSearchOSM()%>%
addReverseSearchOSM()%>%
clearMarkers()%>%
addResetMapButton()%>%
addCircleMarkers(
lng = ~long ,
lat = ~lat,
label = ~ paste(city_country,", ", ttl_users, " user(s)", sep = ""),
radius = ~ttl_users^(1/3),
color  = ~pal(top_city))%>%
addLegend(pal = pal, values = c( "not topcity", "topcity"))
#In this map, the color of the circle indicates the number of github users in each city, still under development.
city_clean_final_aggregate_top <- city_clean_final_aggregate%>%
filter(ttl_users > 10)%>%
mutate(ttl_users_t = log(ttl_users), perc = ttl_users_t/max(ttl_users_t))
pal <- colorFactor(
palette = c(uva_color_palette[2], uva_color_palette[9]),
levels = c( "not topcity", "top city")
)
#ttl user indicated by size
city_clean_final_aggregate%>%
#  mutate(ttl_users_exp = exp(ttl_users)^(1/3))%>%
leaflet()%>%
addTiles()%>%
addSearchOSM()%>%
addReverseSearchOSM()%>%
clearMarkers()%>%
addResetMapButton()%>%
addCircleMarkers(
lng = ~long ,
lat = ~lat,
label = ~ paste(city_country,", ", ttl_users, " user(s)", sep = ""),
radius = ~ttl_users^(1/3),
color  = ~pal(top_city))%>%
addLegend(pal = pal, values = c( "not topcity", "top city"))
#In this map, the color of the circle indicates the number of github users in each city, still under development.
city_clean_final_aggregate_top <- city_clean_final_aggregate%>%
filter(ttl_users > 10)%>%
mutate(ttl_users_t = log(ttl_users), perc = ttl_users_t/max(ttl_users_t))
pal <- colorFactor(
palette = c(uva_color_palette[2], uva_color_palette[9]),
levels = c( "not topcity", "topcity")
)
#ttl user indicated by size
city_clean_final_aggregate%>%
#  mutate(ttl_users_exp = exp(ttl_users)^(1/3))%>%
leaflet()%>%
addTiles()%>%
addSearchOSM()%>%
addReverseSearchOSM()%>%
clearMarkers()%>%
addResetMapButton()%>%
addCircleMarkers(
lng = ~long ,
lat = ~lat,
label = ~ paste(city_country,", ", ttl_users, " user(s)", sep = ""),
radius = ~ttl_users^(1/3),
color  = ~pal(top_city))%>%
addLegend(pal = pal, values = c( "not topcity", "topcity"))
serve_site()
blogdown::serve_site()
blogdown::stop_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
gh_continent<- city_clean_final_aggregate_continent%>%
arrange(desc(ttl_users))
gh_continent$Continent_Name <- factor(gh_continent$c_continent_name, levels = gh_continent$c_continent_name[order(gh_continent$ttl_users)])
ggplot(gh_continent, aes(x = Continent_Name, y = ttl_users, fill = ttl_users))+
geom_bar(stat = "identity")+
scale_fill_continuous(low = uva_color_palette[3], high=uva_color_palette[2])+
labs(#title = "Continents where Github users are located",
x = "Continent", y = "Total Number of Users", fill = "Total Number \n    of Users")+
theme_bw()
gh_country <- city_clean_final_aggregate_country%>%
arrange(desc(ttl_users))%>%
top_n(10, ttl_users)
gh_country$c_country_name <- factor(gh_country$c_country_name, levels = gh_country$c_country_name[order(gh_country$ttl_users)])
ggplot(gh_country, aes(x = c_country_name, y = ttl_users, fill = ttl_users)) +
geom_bar(stat = "identity")+
scale_fill_continuous(low = uva_color_palette[8], high=uva_color_palette[9])+
labs(#title = "Countries where Github users are located",
x = "Country", y = "Total Number of Users", fill = "Total Number \n    of Users") +
theme_bw()
gh_country <- city_clean_final_aggregate_country%>%
arrange(desc(ttl_users))%>%
top_n(10, ttl_users)
gh_country$c_country_name <- factor(gh_country$c_country_name, levels = gh_country$c_country_name[order(gh_country$ttl_users)])
ggplot(gh_country, aes(x = c_country_name, y = ttl_users, fill = ttl_users)) +
geom_bar(stat = "identity")+
scale_fill_continuous(low = uva_color_palette[8], high=uva_color_palette[9])+
labs(#title = "Countries where Github users are located",
x = "Country", y = "Total Number of Users", fill = "Total Number \n    of Users") +
theme_bw()
gh_country <- city_clean_final_aggregate_country%>%
arrange(desc(ttl_users))%>%
top_n(10, ttl_users)
gh_country$c_country_name <- factor(gh_country$c_country_name, levels = gh_country$c_country_name[order(gh_country$ttl_users)])
ggplot(gh_country, aes(x = c_country_name, y = ttl_users, fill = ttl_users)) +
geom_bar(stat = "identity")+
scale_fill_continuous(low = "#E6890F", high=uva_color_palette[9])+
labs(#title = "Countries where Github users are located",
x = "Country", y = "Total Number of Users", fill = "Total Number \n    of Users") +
theme_bw()
gh_country <- city_clean_final_aggregate_country%>%
arrange(desc(ttl_users))%>%
top_n(10, ttl_users)
gh_country$c_country_name <- factor(gh_country$c_country_name, levels = gh_country$c_country_name[order(gh_country$ttl_users)])
ggplot(gh_country, aes(x = c_country_name, y = ttl_users, fill = ttl_users)) +
geom_bar(stat = "identity")+
scale_fill_continuous(low = uva_color_palette[8], high=uva_color_palette[9])+
labs(#title = "Countries where Github users are located",
x = "Country", y = "Total Number of Users", fill = "Total Number \n    of Users") +
theme_bw()
gh_city <- city_clean_final_aggregate%>%
arrange(-ttl_users)%>%
# top_n(10, ttl_users)%>%  #don't know why this code doesn't work
filter(ttl_users >= 6651)
gh_city$city_country <- str_replace_all(gh_city$city_country, fixed(","), "\n")
gh_city$city_country <- factor(gh_city$city_country, levels = gh_city$city_country[order(gh_city$ttl_users)])
# NOTE ::: Could you please shorten the labels for the USA and Russia cities
ggplot(gh_city, aes(x = city_country, y = ttl_users, fill = ttl_users))+
geom_bar(stat = "identity")+
scale_fill_continuous(low = uva_color_palette[9], high=uva_color_palette[2])+
labs(#title = "Countries where Github users are located",
x = "City", y = "Total Number of Users", fill = "Total Number \n    of Users") +
theme_bw()
?scale_fill_continuous
gh_city <- city_clean_final_aggregate%>%
arrange(-ttl_users)%>%
# top_n(10, ttl_users)%>%  #don't know why this code doesn't work
filter(ttl_users >= 6651)
gh_city$city_country <- str_replace_all(gh_city$city_country, fixed(","), "\n")
gh_city$city_country <- factor(gh_city$city_country, levels = gh_city$city_country[order(gh_city$ttl_users)])
# NOTE ::: Could you please shorten the labels for the USA and Russia cities
ggplot(gh_city, aes(x = city_country, y = ttl_users, fill = ttl_users))+
geom_bar(stat = "identity")+
scale_fill_continuous(low = uva_color_palette[3], high=uva_color_palette[2])+
labs(#title = "Countries where Github users are located",
x = "City", y = "Total Number of Users", fill = "Total Number \n    of Users") +
theme_bw()
gh_city <- city_clean_final_aggregate%>%
arrange(-ttl_users)%>%
# top_n(10, ttl_users)%>%  #don't know why this code doesn't work
filter(ttl_users >= 6651)
gh_city$city_country <- str_replace_all(gh_city$city_country, fixed(","), "\n")
gh_city$city_country <- factor(gh_city$city_country, levels = gh_city$city_country[order(gh_city$ttl_users)])
# NOTE ::: Could you please shorten the labels for the USA and Russia cities
ggplot(gh_city, aes(x = city_country, y = ttl_users, fill = ttl_users))+
geom_bar(stat = "identity")+
scale_fill_continuous(low = uva_color_palette[4], high=uva_color_palette[2])+
labs(#title = "Countries where Github users are located",
x = "City", y = "Total Number of Users", fill = "Total Number \n    of Users") +
theme_bw()
gh_continent<- city_clean_final_aggregate_continent%>%
arrange(desc(ttl_users))
gh_continent$Continent_Name <- factor(gh_continent$c_continent_name, levels = gh_continent$c_continent_name[order(gh_continent$ttl_users)])
ggplot(gh_continent, aes(x = Continent_Name, y = ttl_users, fill = ttl_users))+
geom_bar(stat = "identity")+
scale_fill_continuous(low = uva_color_palette[4], high=uva_color_palette[2])+
labs(#title = "Continents where Github users are located",
x = "Continent", y = "Total Number of Users", fill = "Total Number \n    of Users")+
theme_bw()
gh_country <- city_clean_final_aggregate_country%>%
arrange(desc(ttl_users))%>%
top_n(10, ttl_users)
gh_country$c_country_name <- factor(gh_country$c_country_name, levels = gh_country$c_country_name[order(gh_country$ttl_users)])
ggplot(gh_country, aes(x = c_country_name, y = ttl_users, fill = ttl_users)) +
geom_bar(stat = "identity")+
scale_fill_continuous(low = uva_color_palette[8], high=uva_color_palette[9])+
labs(#title = "Countries where Github users are located",
x = "Country", y = "Total Number of Users", fill = "Total Number \n    of Users") +
theme_bw()
blogdown::serve_site()
blogdown::stop_site()
blogdown::stop_server()
gh_continent<- city_clean_final_aggregate_continent%>%
arrange(desc(ttl_users))
gh_continent$Continent_Name <- factor(gh_continent$c_continent_name, levels = gh_continent$c_continent_name[order(gh_continent$ttl_users)])
ggplot(gh_continent, aes(x = Continent_Name, y = ttl_users, fill = ttl_users))+
geom_bar(stat = "identity")+
scale_fill_continuous(low = uva_color_palette[3], high=uva_color_palette[2])+
labs(#title = "Continents where Github users are located",
x = "Continent", y = "Total Number of Users", fill = "Total Number \n    of Users")+
theme_bw()
gh_country <- city_clean_final_aggregate_country%>%
arrange(desc(ttl_users))%>%
top_n(10, ttl_users)
gh_country$c_country_name <- factor(gh_country$c_country_name, levels = gh_country$c_country_name[order(gh_country$ttl_users)])
ggplot(gh_country, aes(x = c_country_name, y = ttl_users, fill = ttl_users)) +
geom_bar(stat = "identity")+
scale_fill_continuous(low = "#E6890F", high=uva_color_palette[9])+
labs(#title = "Countries where Github users are located",
x = "Country", y = "Total Number of Users", fill = "Total Number \n    of Users") +
theme_bw()
gh_city <- city_clean_final_aggregate%>%
arrange(-ttl_users)%>%
# top_n(10, ttl_users)%>%  #don't know why this code doesn't work
filter(ttl_users >= 6651)
gh_city$city_country <- str_replace_all(gh_city$city_country, fixed(","), "\n")
gh_city$city_country <- factor(gh_city$city_country, levels = gh_city$city_country[order(gh_city$ttl_users)])
# NOTE ::: Could you please shorten the labels for the USA and Russia cities
ggplot(gh_city, aes(x = city_country, y = ttl_users, fill = ttl_users))+
geom_bar(stat = "identity")+
scale_fill_continuous(low = uva_color_palette[4], high=uva_color_palette[2])+
labs(#title = "Countries where Github users are located",
x = "City", y = "Total Number of Users", fill = "Total Number \n    of Users") +
theme_bw()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
gh_country <- city_clean_final_aggregate_country%>%
arrange(desc(ttl_users))%>%
top_n(10, ttl_users)
gh_country$c_country_name <- factor(gh_country$c_country_name, levels = gh_country$c_country_name[order(gh_country$ttl_users)])
ggplot(gh_country, aes(x = c_country_name, y = ttl_users, fill = ttl_users)) +
geom_bar(stat = "identity")+
scale_fill_continuous(low = uva_color_palette[9], high="#E6890F")+
labs(#title = "Countries where Github users are located",
x = "Country", y = "Total Number of Users", fill = "Total Number \n    of Users") +
theme_bw()
gh_country <- city_clean_final_aggregate_country%>%
arrange(desc(ttl_users))%>%
top_n(10, ttl_users)
gh_country$c_country_name <- factor(gh_country$c_country_name, levels = gh_country$c_country_name[order(gh_country$ttl_users)])
ggplot(gh_country, aes(x = c_country_name, y = ttl_users, fill = ttl_users)) +
geom_bar(stat = "identity")+
scale_fill_continuous(low = "#E6890F", high=uva_color_palette[9])+
labs(#title = "Countries where Github users are located",
x = "Country", y = "Total Number of Users", fill = "Total Number \n    of Users") +
theme_bw()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown::build_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
devtools::install_github("rstudio/rmarkdown")
library(rmarkdown)
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
install.packages("bsselectR")
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
rm(list = ls())
# load packages
for (pkg in c("tidyverse", "igraph", "data.table", "R.utils", "RPostgreSQL", "countrycode",
"cowplot", "maditr", "lubridate", "igraph")) {library(pkg, character.only = TRUE)}
# connect to postgresql to get data (in rivanna)
conn <- dbConnect(drv = PostgreSQL(),
dbname = "sdad",
host = "10.250.124.195",
port = 5432,
user = Sys.getenv("db_userid"),
password = Sys.getenv("db_pwd"))
# query the bipartite edgelist data from github data
ctr_nodelist <- dbGetQuery(conn, "SELECT * FROM gh.sna_ctr_ctry_codes")
# query the bipartite edgelist data from github data
ctr_edgelist <- dbGetQuery(conn, "SELECT * FROM gh.sna_ctr_edgelist_08")
# disconnect from postgresql
dbDisconnect(conn)
ctr_edgelist %>%
filter(ctr1 == ctr2)
rm(list = ls())
# load packages
for (pkg in c("tidyverse", "igraph", "data.table", "R.utils", "RPostgreSQL", "countrycode",
"cowplot", "maditr", "lubridate", "igraph")) {library(pkg, character.only = TRUE)}
# connect to postgresql to get data (in rivanna)
conn <- dbConnect(drv = PostgreSQL(),
dbname = "sdad",
host = "10.250.124.195",
port = 5432,
user = Sys.getenv("db_userid"),
password = Sys.getenv("db_pwd"))
# query the bipartite edgelist data from github data
ctr_nodelist <- dbGetQuery(conn, "SELECT * FROM gh.sna_ctr_ctry_codes")
# query the bipartite edgelist data from github data
ctr_edgelist <- dbGetQuery(conn, "SELECT * FROM gh.sna_intl_ctr_edgelist_08")
# disconnect from postgresql
dbDisconnect(conn)
ctr_edgelist %>%
filter(ctr1 == ctr2)
rm(list = ls())
# load packages
for (pkg in c("tidyverse", "igraph", "data.table", "R.utils", "RPostgreSQL", "countrycode",
"cowplot", "maditr", "lubridate", "igraph")) {library(pkg, character.only = TRUE)}
# connect to postgresql to get data (in rivanna)
conn <- dbConnect(drv = PostgreSQL(),
dbname = "sdad",
host = "10.250.124.195",
port = 5432,
user = Sys.getenv("db_userid"),
password = Sys.getenv("db_pwd"))
# query the bipartite edgelist data from github data
ctr_nodelist <- dbGetQuery(conn, "SELECT * FROM gh.sna_ctr_ctry_codes")
# query the bipartite edgelist data from github data
ctr_edgelist <- dbGetQuery(conn, "SELECT * FROM gh.sna_intl_ctr_edgelist_yxy")
# disconnect from postgresql
dbDisconnect(conn)
